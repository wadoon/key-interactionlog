/* This file is part of key-abbrevmgr.
 * key-abbrevmgr is licensed under the GNU General Public License Version 2
 * SPDX-License-Identifier: GPL-2.0-only
 */
package io.github.wadoon.key.interactionlog.algo

import io.github.wadoon.key.interactionlog.model.Interaction
import io.github.wadoon.key.interactionlog.model.InteractionLog
import io.github.wadoon.key.interactionlog.model.NodeInteraction
import java.io.PrintWriter
import java.io.StringWriter
import java.lang.ref.WeakReference
import java.util.*

/**
 * @author Alexander Weigl
 * @version 1 (09.12.18)
 */
open class MUProofScriptExport(val logbook: InteractionLog,
                               val writer: PrintWriter) {
    fun run() {
        writeScriptHeader()
        writeScriptBody()
    }

    protected fun writeScriptHeader() {
        writer.format("// Proof script generated by the interaction log extension.\n")
        writer.format("// Created from the ${logbook.name} from ${logbook.created}\n")
        writer.format("// Created ${Date()} by ${System.getenv("user")}\n\n")

        logbook.proof.use {
            writer.format("// Name of the proof: ${it.name()}\n")
            writer.format("// Abbreviations: ${it.abbreviations()}\n")
            writer.format("// Proof file: ${it.proofFile}\n")
            writer.format("// Number of open goals: ${it.openGoals().size()}\n")
        }
    }

    protected fun writeScriptBody() {
        logbook.interactions.forEach {
            writeSelector(it)
            writer.write(it.proofScriptRepresentation)
        }
    }

    protected fun writeSelector(it: Interaction) {
        try {
            (it as NodeInteraction).nodeIdentifier?.let {
                writer.format("select %s;%n", it.branchLabel)
            }
        } catch (_: ClassCastException) {
        }
    }

    companion object {
        fun getScript(current: InteractionLog): String {
            val sw = StringWriter()
            PrintWriter(sw).use {
                MUProofScriptExport(current, it).run()
            }
            return sw.toString()
        }
    }
}

fun <T, R> WeakReference<T>.use(function: (obj: T) -> R) = get()?.let(function)
